package com.mhx.encryption.util.sm;

import org.bouncycastle.crypto.generators.ECKeyPairGenerator;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECKeyGenerationParameters;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECFieldElement.Fp;
import org.bouncycastle.math.ec.ECPoint;

import java.math.BigInteger;
import java.security.SecureRandom;

/**
 * @className DesUtils
 * @description SM2 实例
 * @author MuHongXin.
 * @date 下午4:02 2022/8/10
 * @version v1.0.0
 **/

public class SM2 {

    /**
     * 约等于 RSA-2048位密钥强度配置
     *
     * ---------------------------------------------------------------丨
     * Approximately equal to RSA-2048 key strength configuration.    丨
     * ---------------------------------------------------------------丨
     *
     * "FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
     * "FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC",
     * "E45B3DC2007CB8BDB5C6B8173B9F9D6D56C62D4F3B57A58B01F244AMCFEDEF3",
     * "FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
     * "4C3A2A663A6C267ABE3D3F03F57A2F90B12C8CDC41B9B5FFE4A9685D6D2A9710",
     * "02A65A6C687DECBF429DA61CD19506CDA77DC33B8F7856288D31409E38C3F10C"
     */
    public static String[] eccParam = {
            "FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF",
            "FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC",
            "28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93",
            "FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123",
            "32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7",
            "BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0"
    };

    /**
     * @author: MuHongXin.
     * @dateTime: 下午4:16 2022/8/10
     * @description:    实例化 SM 对象
     *                  SM Object construction
     * @return com.learningProject.util.encryption.sm.SM2
    **/
    public static SM2 instance() {
        return new SM2();
    }

    /**
     * 素数，定义了有限域 GF§
     *
     * --------------------------------------------------------------------丨
     * Prime numbers, define the finite field g f§.                        丨
     * --------------------------------------------------------------------丨
     */
    public final BigInteger eccP;

    /**
     * 椭圆曲线方程的系数
     *
     * --------------------------------------------------------------------丨
     * Coefficients of elliptic curve equations.                           丨
     * --------------------------------------------------------------------丨
     */
    public final BigInteger eccA;
    public final BigInteger eccB;

    /**
     * 大质数，即椭圆曲线上点的数量
     *
     * --------------------------------------------------------------------丨
     * The large prime number, the number of points on an elliptic curve.  丨
     * --------------------------------------------------------------------丨
     */
    public final BigInteger eccN;

    /**
     * 给定的基点坐标
     *
     * --------------------------------------------------------------------丨
     * Given base point coordinates.                                       丨
     * --------------------------------------------------------------------丨
     */
    public final BigInteger eccGx;
    public final BigInteger eccGy;

    /**
     * 代表椭圆曲线对象，包含有限域和椭圆曲线方程等信息，通过调用ECCurve.Fp来生成椭圆曲线
     *
     * ----------------------------------------------------------------------------------------------------------------------------------丨
     * Represents an elliptic curve object, contains information about finite fields and elliptic curve equations,                       丨
     * and generates an elliptic curve by calling e c curve. fp.                                                                         丨
     * ----------------------------------------------------------------------------------------------------------------------------------丨
     */
    public final ECCurve eccCurve;

    /**
     * 代表椭圆曲线上的基点G，即椭圆曲线上的一个点。通过定义 ECPoint.Fp 指定椭圆曲线、X和Y坐标即可生成基点G
     *
     * ----------------------------------------------------------------------------------------------------------------------------------丨
     * Represents the base point g on the elliptic curve, which is a point on the elliptic curve.                                        丨
     * The base point g is generated by specifying the elliptic curve, x and y coordinates by defining e c point.fp                      丨
     * ----------------------------------------------------------------------------------------------------------------------------------丨
     */
    public final ECPoint eccPointG;

    /**
     * 是 BC 库中的椭圆曲线参数域，包含了椭圆曲线、基点G和大质数等信息
     *
     * ----------------------------------------------------------------------------------------------------------------------------------丨
     * Is the elliptic curve parameter field in b and c library, including elliptic curve, base g and large prime number information.    丨
     * ----------------------------------------------------------------------------------------------------------------------------------丨
     */
    public final ECDomainParameters eccBcSpec;

    /**
     * 是密钥对生成器对象，使用上述参数域对其进行初始化后即可生成用于 SM2算法的密钥对
     *
     * ----------------------------------------------------------------------------------------------------------------------------------丨
     * Is a key pair generator object that is initialized with the above parameter fields to generate a key pair for the s m2 algorithm. 丨
     * ----------------------------------------------------------------------------------------------------------------------------------丨
     */
    public final ECKeyPairGenerator eccKeyPairGenerator;

    /**
     * 是 X,Y坐标的大整数对象，在定义基点G时被使用。Fp 指示这些元素所在的有限域是一个素数域(GF§)
     *
     * ----------------------------------------------------------------------------------------------------------------------------------丨
     * Is a large integer object in x and y coordinates, used when defining base point g. fp indicates that the finite                   丨
     * field in which these elements reside is a prime field (g f§).                                                                     丨
     * ----------------------------------------------------------------------------------------------------------------------------------丨
     */
    public final ECFieldElement eccGxFieldElement;
    public final ECFieldElement eccGyFieldElement;

    /**
     * @author: MuHongXin.
     * @dateTime: 下午4:35 2022/8/10
     * @description: 首先根据前面定义的 eccParam 参数数组中对应的六个元素，创建大整数 BigInteger 对象，
     *               表示椭圆曲线的有限域特征 eccP、 eccA 和 eccB，大质数 eccN，及基点坐标 eccGx和 eccGy，
     *               这些参数通过十六进制字符串表示，并以16为基数解析。
     *               然后，SM2 加密算法先通过 eccGx 和 eccGy 分别构造 ECFieldElement 类型的对象 eccGxFieldElement 和 eccGyFieldElement，
     *               用于表示 elliptic curve binary field Fp 中基点 G 的坐标。这些对象是通过 Fp 类的构造函数初始化的，Fp 表示素数域（Galois field）。
     *               接下来，SM2算法使用这些参数构建 ECCurve 类型的对象 eccCurve，代表椭圆曲线。
     *               具体地，可通过调用 ECCurve.Fp 构造函数生成椭圆曲线 eccCurve，该函数的参数为椭圆曲线的有限域特征 eccP、椭圆曲线系数 eccA 和 eccB。
     *               再然后，使用这个 eccCurve、eccGxFieldElement 和 eccGyFieldElement 参数构建 ECPoint.Fp 类型的对象 eccPointG，即椭圆曲线上的基点G。
     *               再然后使用 ECDomainParameters 构造函数和上述参数构造椭圆曲线参数域 eccBcSpec，
     *               这个参数域包括椭圆曲线 eccCurve、基点G eccPointG 和大质数 eccN。
     *               再然后使用 eccBcSpec 和随机数生成器对象 SecureRandom 构造 ECKeyGenerationParameters 类型的对象 eccEcGenParam。
     *               最后使用 eccEcGenParam 初始化 ECKeyPairGenerator 类型的对象 eccKeyPairGenerator，该对象可生成用于 SM2加密算法的密钥对。
     *
     * ---------------------------------------------------------------------------------------------------------------------------------------------------------------------丨
     *               The above code first creates BigInteger objects representing the field characteristic eccP,                                                            丨
     *               curve coefficient eccA, and eccB, large prime number eccN, and coordinates of the base point eccGx and eccGy,                                          丨
     *               respectively, by parsing hexadecimal strings using a radix of 16 from the eccParam parameter array.                                                    丨
     *               Next, SM2 encryption algorithm constructs ECFieldElement objects eccGxFieldElement and eccGyFieldElement                                               丨
     *               representing the coordinates of the base point G in the elliptic curve binary field Fp using eccGx and eccGy, respectively.                            丨
     *               These objects are initialized using the Fp class constructor, which represents a prime field (Galois field).                                           丨
     *               Then the SM2 algorithm uses these parameters to construct ECCurve object eccCurve, which represents the elliptic curve.                                丨
     *               Specifically, the ECCurve.Fp constructor is called to generate eccCurve using the finite field characteristic eccP, curve coefficients eccA and eccB.  丨
     *               Then the ECPoint.Fp object eccPointG representing the base point G on the elliptic curve is constructed using this eccCurve object                     丨
     *               along with the eccGxFieldElement and eccGyFieldElement parameters.                                                                                     丨
     *               Finally, the elliptic curve domain parameters eccBcSpec are constructed using ECDomainParameters constructor along with the eccCurve,                  丨
     *               eccPointG, and eccN parameters. ECKeyGenerationParameters object eccEcGenParam is constructed using eccBcSpec and the SecureRandom                     丨
     *               random number generator, and is used to initialize ECKeyPairGenerator object eccKeyPairGenerator, which generates key pairs for use in the SM2         丨
     *               encryption algorithm.                                                                                                                                  丨
     * ---------------------------------------------------------------------------------------------------------------------------------------------------------------------丨
    **/
    public SM2() {
        // 初始化参数 (使用十六进制字符串创建 BigInteger 对象) | Initialization parameters (Create a big integer object with a hexadecimal string)
        this.eccP = new BigInteger(eccParam[0], 16);
        this.eccA = new BigInteger(eccParam[1], 16);
        this.eccB = new BigInteger(eccParam[2], 16);
        this.eccN = new BigInteger(eccParam[3], 16);
        this.eccGx = new BigInteger(eccParam[4], 16);
        this.eccGy = new BigInteger(eccParam[5], 16);

        // 创建有限域元素对象 | Create finite field element objects
        this.eccGxFieldElement = new Fp(this.eccP, this.eccGx);
        this.eccGyFieldElement = new Fp(this.eccP, this.eccGy);

        // 创建椭圆曲线对象 | Create elliptic curve objects
        this.eccCurve = new ECCurve.Fp(this.eccP, this.eccA, this.eccB);

        // 创建基点对象 | Create base point objects
        this.eccPointG = new ECPoint.Fp(this.eccCurve, this.eccGxFieldElement, this.eccGyFieldElement);

        // 创建椭圆曲线参数对象 | Create elliptic curve parameter objects
        this.eccBcSpec = new ECDomainParameters(this.eccCurve, this.eccPointG, this.eccN);

        // 创建密钥生成参数对象 | Create key generation parameter objects
        ECKeyGenerationParameters eccEcGenParam;
        eccEcGenParam = new ECKeyGenerationParameters(this.eccBcSpec, new SecureRandom());

        // 创建密钥对生成器对象 | Create a key pair generator object
        this.eccKeyPairGenerator = new ECKeyPairGenerator();

        // 初始化密钥对生成器 | Initialize key pair generator
        this.eccKeyPairGenerator.init(eccEcGenParam);
    }
}